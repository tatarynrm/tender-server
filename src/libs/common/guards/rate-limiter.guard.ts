// libs/common/guards/rate-limiter.guard.ts
import { Injectable, ExecutionContext } from '@nestjs/common';
import {
  ThrottlerGuard,
  ThrottlerException,
  ThrottlerLimitDetail,
} from '@nestjs/throttler';

@Injectable()
export class CustomThrottlerGuard extends ThrottlerGuard {
  protected async throwThrottlingException(
    context: ExecutionContext,
    throttlerLimitDetail: ThrottlerLimitDetail,
  ): Promise<void> {
    // –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ context –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    throw new ThrottlerException('–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É üïê');
  }

  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ user-{id} —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ IP (fallback)
  protected async getTracker(req: Record<string, any>): Promise<string> {
    if (req.user?.id) {
      return `user-${req.user.id}`;
    }
    // –Ω–∞–¥—ñ–π–Ω—ñ—à–∏–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ—à—É–∫—É IP
    return req.ip || req.headers?.['x-real-ip'] || req.connection?.remoteAddress || 'anon';
  }

  // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ª–æ–≥ –¥–ª—è –¥–µ–±–∞–≥—É ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ guard –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è
  public async canActivate(context: ExecutionContext): Promise<boolean> {
    const req = context.switchToHttp().getRequest();
    try {
      const tracker = await this.getTracker(req);
      console.log('[Throttler] tracker=', tracker, 'path=', req.path);
    } catch (e) {
      console.warn('[Throttler] getTracker failed', e);
    }
    return super.canActivate(context);
  }
}
